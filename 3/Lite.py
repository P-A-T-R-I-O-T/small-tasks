import numpy as np
import time

"""
Задача 1
Поместите в переменную my_array файл train_vector_1.csv с помощью функции np.loadtxt.

Убедитесь, что подгруженный массив имеет тип np.ndarray (выведите тип переменной my_array).
"""
# my_array = np.loadtxt('train_vector_1.csv')
# print(my_array)



"""
Задача 2
Напишите код, который считает среднее значение всех элементов массива (без использования встроенных функций np.mean и т. д.). Для решения задачи воспользуйтесь циклом.

С помощью команды %%timeit отобразите время выполнения написанного кода.
Преобразуйте массив my_array в список (с помощью метода list()), сохраните его в переменной my_list.
В новой ячейке посчитайте среднее значение всех элементов списка (воспользуйтесь тем же кодом, что и для массива).
Командой %%timeit отобразите время выполнения и этой ячейки.
"""
# Вы можете вставить свой код, который Вы хотите измерить, между `start_time` и `end_time`.
# После выполнения этого кода Вы получите среднее время выполнения Вашего кода за 1000 запусков.
# total_time = 0
# num_runs = 1000
# for _ in range(num_runs):
#     start_time = time.time()
#
# #################################################
#     # Ваш код, который нужно измерить
#     numerator = 0  # Числитель
#     denominator = 0  # Знаменатель
#     for i in my_array:
#         numerator += i  # Складывает все значения данного массива
#         denominator += 1  # Считает сколько всего значений в массиве
#     rezult = numerator / denominator  # Делим и находим среднее число
# #####################################################
#     end_time = time.time()
#     total_time += end_time - start_time
# average_time = total_time / num_runs
# print("Среднее время выполнения: {:.5f} секунд".format(average_time))
#
#
# my_list = list(my_array)
#
# total_time = 0
# num_runs = 1000
# for _ in range(num_runs):
#     start_time = time.time()
# ###################################################################
#     # Ваш код, который нужно измерить
#     numerator = 0  # Числитель
#     denominator = 0  # Знаменатель
#     for i in my_list:
#         numerator += i  # Складывает все значения данного массива
#         denominator += 1  # Считает сколько всего значений в массиве
#     rezult = numerator / denominator  # Делим и находим среднее число
# #####################################################################
#     end_time = time.time()
#     total_time += end_time - start_time
# average_time = total_time / num_runs
# print("Среднее время выполнения: {:.5f} секунд".format(average_time))


"""
Задача 3
Подгрузите файл iris.csv с помощью встроенной функции np.loadtxt.
Назовите его my_2d_array. Напишите код, который считает сумму элементов массива по столбцам
(для решения данной задачи воспользуйтесь разделом ноутбук "Операции с двумерными массивами и встроенные методы").
"""

# my_2d_array = np.loadtxt('iris.csv', delimiter=',', skiprows=1) # Читает файл, убирает запятые между числами и игнорирует первую строчку с названием колонок
# # print(my_2d_array)
# column_sums = np.sum(my_2d_array, axis=0) # Вычисляем сумму элементов по столбцам
# print(column_sums)



"""
Задача 4
Используя библиотеку numpy, создайте массив 3x3, 
значения которого находятся в диапазоне от 11 до 40 (раздел "Семплирование из распределений").
Не используя цикл for, выведите на экран список элементов, которые меньше 20 (раздел "Индексация").
Просуммируйте все элементы, не используя цикл for (раздел "Встроенные методы").
"""



# arr = np.random.randint(11, 41, size=(3, 3)) # Создаем массив 3x3 со случайными значениями от 11 до 40
# print(arr)
# print(arr[arr < 20]) # Выводим элементы, которые меньше 20
# print(np.sum(arr)) # Суммируем все элементы массива

"""
Задача 5
Создайте массив, который будет содержать списки с именем студента(str), его возрастом(int) и средней оценкой(float)
(обратите внимание на пример с занятия со списком автомобильных регионов).
Отсортируйте такой массив (обратите внимание на параметр order метода sort()).
Замените значение, отвечающее за возраст, у всех студентов на одно и то же, например, 10. Отсортируйте такой массив.
"""

my_type = [('name', '<U32'),('age', np.int32), ('average rating', np.float16)]
my_list = [('Наташа', 20, 4.8), ('Вася', 21, 3.4), ('Пётр', 20, 4.2)]
my_list_np = np.array(my_list, dtype=my_type)
print(my_list_np, '\n')
my_list_np.sort(order='average rating') # Отсортируем массив по успеваемости
print("Массив после сортировки по успеваемости:")
print(my_list_np, '\n')
my_list_np = my_list_np[::-1] # Переворачивает список в обратном порядке
print("Массив после сортировки по успеваемости в обратном порядке:")
print(my_list_np, '\n')

my_list_np['age'] = 10 # Заменим значение возраста на 10 у всех студентов
my_list_np.sort() # Отсортируем массив по умолчанию (первый элемент) в нашем случае имя студента по алфавиту
print("Массив после замены возраста и повторной сортировки:")
print(my_list_np)